#!/bin/sh
#
# vim: set noexpandtab tabstop=8 softtabstop=4 shiftwidth=4:

# remote for http://mixes.djfez.com

# needs external tools:
#  - lynx
#  - wget
#  - cat
#  - cut
#  - find
#  - grep
#  - head
#  - mkdir
#  - sed
#  - stat

dumpurls()
# get URL list
{
    lynx -dump "$@" | cut -c 7- | grep ^http:
}

abend()
# end with error
{
    echo "$@" 1>&2
    exit 1
}

downloadSong()
# download a single song into the data directory
{
    local URL TARGETFILE TMPFILE NUMBER
    NUMBER="${1}"
    URL="${DOWNLOADURL}${NUMBER}/"
    TARGETFILE="${DATADIR}/${NUMBER}.mp3"
    TMPFILE="${TARGETFILE}.tmp"
    echo -n "downloading #${NUMBER} (${URL} => ${TARGETFILE})..."
    wget -qcO"${TMPFILE}" "${DOWNLOADURL}${NUMBER}/"
    mv "${TMPFILE}" "${TARGETFILE}"
}

printDescription()
# download information about a single song
{
    lynx --dump --hiddenlinks=ignore --nolist "${1}" \
	| sed -n -e '/^Mixes/{:l1 p; n; b l1}' \
	| sed -n -e '/Link Link to this mix/q;p' \
	| (read; read; read; read; cut -c 4-) \
}

parsePage()
# recursively get song style listings
{
    local STYLE PAGE NEXTPAGE STATE
    STYLE="${1}"
    PAGE=${2}
    NEXTPAGE=$(( ${PAGE} + 1 ))
    STATE=0
    
    dumpurls "${MIXESURL}${STYLE}/${PAGE}/" | while read URL; do

	case ${STATE} in
	    0)
		if [ "${URL}" = "http://donate.djfez.com/" ] ; then
		    STATE=1
		fi
		;;
	    
	    1)
		if [[ "${URL}" =~ ^${MIXESURL}[0-9][0-9][0-9][0-9]/$ ]] ; then
		    echo ${URL}
		    STATE=2
		fi
		;;

	    2)
		if [[ "${URL}" =~ ^${MIXESURL}[0-9][0-9][0-9][0-9]/$ ]] ; then
		    echo ${URL}
		else
		    if [ "${URL}" = "${MIXESURL}${STYLE}/${NEXTPAGE}/" ] ; then
			parsePage "${STYLE}" ${NEXTPAGE}
		    else
			if [ "${URL}" = "${MIXESURL}" ] ; then
			    return
			fi
		    fi
		fi
		
	esac
	    
    done
}

checkStyle()
# check whether the STYLE argument is valid
{
    if [ -z "$(echo ${STYLE})" ] ; then
	abend no style given
    fi
}

checkNumber()
# check whether the NUMBER argument is valid
{
    if [ -z "$(echo ${NUMBER})" ] ; then
	abend no number given
    fi
    
    if [[ ! "${NUMBER}" =~ ^[0-9][0-9][0-9][0-9]$ ]] ; then
	abend number not parseable
    fi
}

BASEURL=http://mixes.djfez.com/
MIXESURL=${BASEURL}mixes/
DOWNLOADURL=${BASEURL}download/
DATADIR="data"

ACTION="${1}"
shift

case "${ACTION}" in

    style)
        # list all styles
	dumpurls ${MIXESURL} | egrep '^http://mixes.djfez.com/mixes/[^0-9].*/$' | sed -e "s,${MIXESURL},," -e "s,/$,,"
	
	;;
    
    update)
	# update song list of style <style>
	STYLE="${1}"
	shift
	checkStyle

	STYLEDIR=styles/"${STYLE}"
	DATADIR=data
	mkdir -p "${STYLEDIR}" "${DATADIR}"
	parsePage "${STYLE}" 1 | while read URL; do
	    NUMBER=${URL%/}
	    NUMBER=${NUMBER##*/}
	    
	    EXISTFILE="${STYLEDIR}/${NUMBER}"
	    INFOFILE="${EXISTFILE}.info"

	    touch "${EXISTFILE}"

	    if [ ! -e "${INFOFILE}" ] ; then
		printDescription "${URL}" > "${INFOFILE}"
	    fi

	    echo -n .
	done
	echo
	
	;;

    upgrade)
	# download missing songs of style <style>
	STYLE="${1}"
	shift
	checkStyle

	set -e
	STYLEDIR="styles/${STYLE}"

	mkdir -p "${STYLEDIR}" "${DATADIR}"
	
	for FILE in ${STYLEDIR}/????; do
	    NUMBER=$(basename ${FILE})
	    if [ -e "${DATADIR}/${NUMBER}.mp3" ] ; then

		if [ -e "${STYLEDIR}/${NUMBER}.mp3" ] ; then
		    echo "skipping existing #${NUMBER}"
		else
		    echo "adding symlink to #${NUMBER}"
		    ln -sf "../../${DATADIR}/${NUMBER}.mp3" "${STYLEDIR}/${NUMBER}.mp3"
		fi

	    else

		if [ -L "${STYLEDIR}/${NUMBER}.mp3" -o -e "${STYLEDIR}/${NUMBER}.mp3" ] ; then
		    echo "skipping unwanted #${NUMBER}"
		else
		    downloadSong "${NUMBER}"
		    ln -sf "../../${DATADIR}/${NUMBER}.mp3" "${STYLEDIR}/${NUMBER}.mp3"
		    echo ok
		    sleep 60 # don't hammer their servers
		fi

	    fi
	done
	;;

    install)
        # force download of song <song>
	NUMBER="${1}"
	shift
	checkNumber

	downloadSong "${NUMBER}"
	FILE="${DATADIR}/${NUMBER}.mp3"
	if [ $(stat -c%s "${FILE}") -lt 10000 ] ; then
	    echo "NOK"
	    rm "${FILE}"
	    abend file too small, possible error, file deleted.
	else
	    echo "ok"
	fi
	;;

    show)
	# display information about song <song>
	NUMBER="${1}"
	shift
	checkNumber

	FOUND="$( find styles/ -type f -name "${NUMBER}.info" | head -n 1 )"
	if [ "${FOUND}" ] ; then
	    cat "${FOUND}"
	else
	    printDescription "${MIXESURL}${NUMBER}/"
	fi
	;;

    clean)
	# remove interrupted downloads
	echo "cleaning..."
	find data/ -type f -name \*.mp3.tmp -exec echo {} + -exec rm {} +
	echo "ok"
	;;
    
    *)
	# show help text
	cat <<EOF
usage:
djfez clean               - remove interrupted downloads    
djfez style               - list all styles
djfez install <song>      - force download of song <song>
djfez show <song>         - display information about song <song>
djfez update <style>      - update song list of style <style>
djfez upgrade <style>     - download missing songs of style <style>


1) run "djfez style"

2) choose a style and run "djfez update <style>" for index date

3) run "djfez upgrade <style>" to start download
   this might take some time and can be interrupted any time
   (restart "djfez upgrade <style"> to continue,
    run "djfez clean" to remove temporary files of interrupted downloads)

4) listen to your music in the data directory
   if you don't like a song, you have two options:
   a) delete the .mp3 from the data directory.  if the song appears within
      another style, it will be downloaded again.
   b) emtpy the .mp3 file in the data directory (via "echo > 1234.mp3" or
      "rm 1234.mp3; touch 1234.mp3").  this way the song will never be
      downloaded again.

5) after some time, restart at 2) to get new songs
EOF
	;;

esac
